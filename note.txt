main.py
import streamlit as st
from crop_advisor import CropAdvisor
from seasonal_calendar import display_seasonal_calendar
from health_dashboard import display_health_dashboard
import base64

def main():
    # Set page configuration
    st.set_page_config(
        page_title="Farmer's Crop Planning Assistant",
        page_icon="üåæ",
        layout="wide"
    )

    # Load custom CSS
    with open("styles.css") as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

    # Header
    st.markdown("<h1 class='main-header'>üåæ Farmer's Crop Planning Assistant</h1>", unsafe_allow_html=True)

    # Create tabs for different features
    tab1, tab2, tab3 = st.tabs(["Crop Advisor", "Seasonal Calendar", "Health Dashboard"])

    with tab1:
        display_crop_advisor()

    with tab2:
        display_seasonal_calendar()

    with tab3:
        display_health_dashboard()

def display_crop_advisor():
    # Instructions
    st.markdown(
        """
        <div class='instruction-text'>
            <b>How to use this tool:</b>
            <ol>
                <li>Enter the name of your crop in the input field below</li>
                <li>Click on 'Get Advice' to receive detailed planning information</li>
                <li>The system will provide you with specific guidance for:</li>
                <ul>
                    <li>Ploughing</li>
                    <li>Sowing</li>
                    <li>Watering</li>
                    <li>Fertilization</li>
                    <li>Harvesting</li>
                </ul>
            </ol>
        </div>
        """,
        unsafe_allow_html=True
    )

    # Create input section
    st.markdown("<div class='crop-input'>", unsafe_allow_html=True)
    crop_name = st.text_input("Enter your crop name:", placeholder="e.g., Rice, Wheat, Cotton")
    submit_button = st.button("Get Advice")
    st.markdown("</div>", unsafe_allow_html=True)

    # Initialize CropAdvisor
    try:
        advisor = CropAdvisor()
    except ValueError as e:
        st.error("API Configuration Error: Please make sure the GOOGLE_API_KEY is properly set.")
        return

    if submit_button and crop_name:
        try:
            with st.spinner('Getting expert advice for your crop...'):
                response, error = advisor.get_crop_advice(crop_name)

                if response:
                    st.markdown("<div class='response-container'>", unsafe_allow_html=True)
                    st.markdown("### üìã Crop Planning Advice")
                    st.markdown(response)
                    st.markdown("</div>", unsafe_allow_html=True)
                elif error:
                    st.error(error)
                else:
                    st.error("Unable to get advice at the moment. Please try again.")

        except Exception as e:
            st.markdown(
                f"""
                <div class='error-message'>
                    <strong>Error:</strong> {str(e)}
                    <br>Please try again later or contact support if the problem persists.
                </div>
                """,
                unsafe_allow_html=True
            )
    elif submit_button:
        st.warning("Please enter a crop name first.")

if __name__ == "__main__":
    main()



styles.css
stApp {
    max-width: 800px;
    margin: 0 auto;
}

.main-header {
    color: #2E7D32;
    text-align: center;
    padding: 1rem;
}

.instruction-text {
    background-color: #090909;
    padding: 1rem;
    border-radius: 5px;
    margin: 1rem 0;
}

.crop-input {
    margin: 2rem 0;
}

.response-container {
    background-color: #FFFFFF;
    padding: 1.5rem;
    border-radius: 5px;
    border: 1px solid #E0E0E0;
    margin-top: 2rem;
}

.loading-spinner {
    text-align: center;
    margin: 2rem 0;
}

.error-message {
    background-color: #FFEBEE;
    color: #C62828;
    padding: 1rem;
    border-radius: 5px;
    margin: 1rem 0;
}

/* Seasonal calendar styles */
.season-card {
    background-color: #F1F8E9;
    border-radius: 8px;
    padding: 1.5rem;
    margin: 1rem 0;
    border-left: 4px solid #7CB342;
}

.month-pill {
    display: inline-block;
    background-color: #C5E1A5;
    padding: 0.3rem 0.8rem;
    border-radius: 15px;
    margin: 0.2rem;
    font-size: 0.9rem;
}

.crop-list {
    list-style-type: none;
    padding-left: 0;
}

.crop-list li {
    margin: 0.5rem 0;
    padding-left: 1.5rem;
    position: relative;
}

.crop-list li:before {
    content: "üå±";
    position: absolute;
    left: 0;
}

/* Health Dashboard styles */
.health-score-container {
    background-color: #FFFFFF;
    border-radius: 10px;
    padding: 2rem;
    text-align: center;
    margin: 1rem 0;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.score-excellent {
    border-left: 6px solid #4CAF50;
}

.score-good {
    border-left: 6px solid #8BC34A;
}

.score-fair {
    border-left: 6px solid #FFC107;
}

.score-poor {
    border-left: 6px solid #F44336;
}

.score-number {
    font-size: 3rem;
    font-weight: bold;
    color: #2E7D32;
}

.score-status {
    font-size: 1.5rem;
    color: #666;
    margin-top: 0.5rem;
}

.recommendations-container {
    background-color: #F5F5F5;
    border-radius: 5px;
    padding: 1.5rem;
    margin: 1rem 0;
    border-left: 4px solid #2E7D32;
}

crop_advisor.py

import os
import google.generativeai as genai
from typing import Optional, Tuple

class CropAdvisor:
    def __init__(self):
        # Initialize Gemini API
        api_key = os.environ.get("GOOGLE_API_KEY")
        if not api_key:
            raise ValueError("GOOGLE_API_KEY environment variable is not set")

        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-pro')

        self.base_prompt = """You are an agricultural expert. Provide detailed farming advice for the following crop.
Include specific information about:
1. Ploughing: When and how to prepare the land
2. Sowing: Best time and method
3. Watering: Frequency and amount
4. Fertilization: Types and timing
5. Harvesting: When and how to harvest

Give me the proper planning with specific duration periods. Keep the content relevant and to-the-point for the crop: """

    def get_crop_advice(self, crop_name: str) -> Tuple[Optional[str], Optional[str]]:
        """
        Get crop advice from Gemini
        Returns tuple of (response, error_message)
        """
        try:
            if not crop_name.strip():
                return None, "Please enter a valid crop name."

            # Create the chat completion request
            response = self.model.generate_content(
                f"{self.base_prompt}{crop_name}"
            )

            if response.text:
                return response.text, None
            else:
                return None, "No response generated from the AI model."

        except Exception as e:
            error_msg = str(e)
            if "API key" in error_msg.lower():
                return None, "Gemini API key error. Please check your API key configuration."
            else:
                return None, f"Error getting crop advice: {error_msg}"


calendar_data.py
from typing import Dict, List
from dataclasses import dataclass
from datetime import datetime

@dataclass
class CropSeason:
    name: str
    best_planting_months: List[int]
    description: str
    recommended_crops: List[str]

# Define seasons and their characteristics
SEASONS = {
    'Spring': CropSeason(
        name='Spring',
        best_planting_months=[2, 3, 4],  # February to April
        description='Moderate temperatures and increasing daylight make it ideal for many crops.',
        recommended_crops=['Tomatoes', 'Peppers', 'Corn', 'Beans', 'Peas']
    ),
    'Summer': CropSeason(
        name='Summer',
        best_planting_months=[5, 6, 7],  # May to July
        description='Warm temperatures and long days support heat-loving crops.',
        recommended_crops=['Okra', 'Eggplant', 'Sweet Potatoes', 'Watermelon', 'Cucumbers']
    ),
    'Fall': CropSeason(
        name='Fall',
        best_planting_months=[8, 9, 10],  # August to October
        description='Cooling temperatures are perfect for hardy vegetables.',
        recommended_crops=['Broccoli', 'Carrots', 'Cabbage', 'Spinach', 'Lettuce']
    ),
    'Winter': CropSeason(
        name='Winter',
        best_planting_months=[11, 12, 1],  # November to January
        description='Cold-hardy crops and greenhouse cultivation.',
        recommended_crops=['Kale', 'Brussels Sprouts', 'Winter Wheat', 'Garlic', 'Onions']
    )
}

def get_current_season() -> CropSeason:
    """Get the current season based on the month."""
    current_month = datetime.now().month
    
    for season in SEASONS.values():
        if current_month in season.best_planting_months:
            return season
    
    # Default to Spring if something goes wrong
    return SEASONS['Spring']

def get_recommended_crops(month: int = None) -> Dict[str, List[str]]:
    """Get recommended crops for the given month or current month."""
    if month is None:
        month = datetime.now().month
    
    recommendations = {}
    for season_name, season_data in SEASONS.items():
        if month in season_data.best_planting_months:
            recommendations[season_name] = season_data.recommended_crops
    
    return recommendations


seasonal_calendar

import streamlit as st
from datetime import datetime
from calendar_data import SEASONS, get_current_season, get_recommended_crops

def display_seasonal_calendar():
    st.markdown("<h2 class='main-header'>üóìÔ∏è Seasonal Farming Calendar</h2>", unsafe_allow_html=True)
    
    # Get current season and month
    current_season = get_current_season()
    current_month = datetime.now().month
    
    # Display current season information
    st.markdown(
        f"""
        <div class='instruction-text'>
            <h3>Current Season: {current_season.name}</h3>
            <p>{current_season.description}</p>
        </div>
        """,
        unsafe_allow_html=True
    )
    
    # Create season selector
    selected_season = st.selectbox(
        "Select a season to view recommendations:",
        options=list(SEASONS.keys()),
        index=list(SEASONS.keys()).index(current_season.name)
    )
    
    # Display selected season's information
    season_data = SEASONS[selected_season]
    
    st.markdown("<div class='response-container'>", unsafe_allow_html=True)
    
    # Display planting months
    months = [datetime(2000, m, 1).strftime('%B') for m in season_data.best_planting_months]
    st.markdown(f"### üìÖ Best Planting Months")
    st.write(", ".join(months))
    
    # Display recommended crops
    st.markdown("### üå± Recommended Crops")
    for crop in season_data.recommended_crops:
        st.markdown(f"- {crop}")
    
    st.markdown("</div>", unsafe_allow_html=True)
    
    # Add a button to get detailed advice for selected crop
    if st.button("Get detailed advice for a recommended crop"):
        st.session_state.selected_crop = st.selectbox(
            "Select a crop for detailed advice:",
            options=season_data.recommended_crops
        )
        
    # Show detailed advice if crop is selected
    if 'selected_crop' in st.session_state:
        st.markdown("<div class='crop-input'>", unsafe_allow_html=True)
        st.markdown(f"### Detailed Advice for {st.session_state.selected_crop}")
        st.markdown("</div>", unsafe_allow_html=True)


crop_health_analyzer.py
import os
import google.generativeai as genai
from dataclasses import dataclass
from typing import Dict, List, Optional, Tuple

@dataclass
class HealthMetrics:
    soil_health: float  # 0-100
    water_management: float  # 0-100
    pest_presence: float  # 0-100
    nutrient_levels: float  # 0-100

class CropHealthAnalyzer:
    def __init__(self):
        api_key = os.environ.get("GOOGLE_API_KEY")
        if not api_key:
            raise ValueError("GOOGLE_API_KEY environment variable is not set")
        
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-pro')
        
        self.recommendation_prompt = """
        As an agricultural expert, analyze the following crop health metrics and provide specific recommendations:
        
        Soil Health Score: {soil_health}/100
        Water Management Score: {water_management}/100
        Pest Presence Score: {pest_presence}/100
        Nutrient Levels Score: {nutrient_levels}/100
        
        Please provide:
        1. An overall health assessment
        2. Specific recommendations for improvement
        3. Priority actions to take
        
        Focus on practical, actionable advice that farmers can implement.
        """

    def calculate_overall_score(self, metrics: HealthMetrics) -> float:
        """Calculate overall health score from individual metrics."""
        weights = {
            'soil_health': 0.3,
            'water_management': 0.25,
            'pest_presence': 0.2,
            'nutrient_levels': 0.25
        }
        
        return (
            metrics.soil_health * weights['soil_health'] +
            metrics.water_management * weights['water_management'] +
            metrics.pest_presence * weights['pest_presence'] +
            metrics.nutrient_levels * weights['nutrient_levels']
        )

    def get_health_recommendations(self, metrics: HealthMetrics) -> Tuple[Optional[str], Optional[str]]:
        """Get AI-powered recommendations based on health metrics."""
        try:
            prompt = self.recommendation_prompt.format(
                soil_health=metrics.soil_health,
                water_management=metrics.water_management,
                pest_presence=metrics.pest_presence,
                nutrient_levels=metrics.nutrient_levels
            )
            
            response = self.model.generate_content(prompt)
            
            if response.text:
                return response.text, None
            else:
                return None, "No recommendations generated."
                
        except Exception as e:
            return None, f"Error generating recommendations: {str(e)}"

    def get_score_status(self, score: float) -> str:
        """Get status description based on score."""
        if score >= 80:
            return "Excellent"
        elif score >= 60:
            return "Good"
        elif score >= 40:
            return "Fair"
        else:
            return "Poor"


health_dashboard 

import streamlit as st
from crop_health_analyzer import CropHealthAnalyzer, HealthMetrics

def display_health_dashboard():
    st.markdown("<h2 class='main-header'>üåø Crop Health Dashboard</h2>", unsafe_allow_html=True)
    
    # Initialize the analyzer
    try:
        analyzer = CropHealthAnalyzer()
    except ValueError as e:
        st.error("API Configuration Error: Please make sure the GOOGLE_API_KEY is properly set.")
        return

    # Create input sliders for health metrics
    st.markdown("### üìä Health Metrics")
    st.markdown("Adjust the sliders below to input your crop's health parameters:")

    col1, col2 = st.columns(2)
    
    with col1:
        soil_health = st.slider("Soil Health", 0, 100, 70, help="Rate the overall soil quality and structure")
        water_management = st.slider("Water Management", 0, 100, 70, help="Rate irrigation efficiency and water availability")
    
    with col2:
        pest_presence = st.slider("Pest Control", 0, 100, 70, help="Rate the effectiveness of pest control measures")
        nutrient_levels = st.slider("Nutrient Levels", 0, 100, 70, help="Rate the availability of essential nutrients")

    # Create metrics object
    metrics = HealthMetrics(
        soil_health=soil_health,
        water_management=water_management,
        pest_presence=pest_presence,
        nutrient_levels=nutrient_levels
    )

    # Calculate overall score
    overall_score = analyzer.calculate_overall_score(metrics)
    status = analyzer.get_score_status(overall_score)

    # Display overall health score
    st.markdown("### üéØ Overall Health Score")
    st.markdown(
        f"""
        <div class='health-score-container score-{status.lower()}'>
            <div class='score-number'>{overall_score:.1f}</div>
            <div class='score-status'>{status}</div>
        </div>
        """,
        unsafe_allow_html=True
    )

    # Get and display AI recommendations
    st.markdown("### ü§ñ AI-Powered Recommendations")
    with st.spinner("Generating recommendations..."):
        recommendations, error = analyzer.get_health_recommendations(metrics)
        
        if recommendations:
            st.markdown(
                f"""
                <div class='recommendations-container'>
                    {recommendations}
                </div>
                """,
                unsafe_allow_html=True
            )
        elif error:
            st.error(error)
